// This is a Moore state machine with two states 0 and 1, one input in, and one output out. 
// Reset state is 0. Output is high in state 0. If in is low, state changes.
module simple_fsm(input clk, input reset, input in, output out);
reg present_state, next_state;
// Output out is high only in state 0, it is low otherwise
// state toggles when input in is low. state does not change when input in is high.
// Reset state is 0
assign out = present_state? 0 : 1;
always @(posedge clk) begin
    if (reset) begin
        present_state <= 0;
    end else begin
        present_state <= next_state;
    end
end

// present_state is the current state of the FSM. next_state is the state that the FSM will transition to.
// If present_state is 0 and in is low, state changes to 1
// If present_state is 1 and in is low, state changes to 0
// If present_state is 0 and in is high, state does not change
// If present_state is 1 and in is high, state does not change
always @(present_state, in) begin
    case (present_state)
        0: begin
            if (~in) next_state <= 1;
            else next_state <= 0;
        end
        1: begin
            if (~in) next_state <= 0;
            else next_state <= 1;
        end
    endcase
end

endmodule
