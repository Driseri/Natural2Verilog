// This is a shift left and rotate operation
module left_rotate(input clk,input reset,input [2:0] amount,input [7:0] data,input load,output reg [7:0] out);
// when load is high, load data to out
// when load is low, shift left and rotate the register out by amount bits

// always @(posedge clk) begin
//     if (reset)
//         out <= data;
//     else if (load)
//         out <= {out[2:0], out[7:1]};
// end

// always @(posedge clk) begin
//     if (reset)
//         out <= data;
//     else if (load)
//         out <= {out[2:0], out[7:1]};
//     else if (amount == 1)
//         out <= {out[0], out[1:0]};
//     else if (amount == 2)
//         out <= {out[1], out[0], out[2:1]};
//     else if (amount == 3)
//         out <= {out[2], out[1], out[0], out[3:2]};
// end

// always @(posedge clk) begin
//     if (reset)
//         out <= data;
//     else if (load)
//         out <= {out[2:0], out[7:1