// Design a 64-bit arithmetic shift register, with synchronous load. 
// When ena is high, the shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// when load is high, data is loaded.
// if ena is high, shift q according to the following values of amount:
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.
// The shift is done synchronously, and the q output is updated only when the load signal is high.
// The shift is done in a way that keeps the MSB of q constant.
// The LSB of q is undefined when ena is high, and load is low.

// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design should be synthesized with a single clock cycle delay. 
// The design