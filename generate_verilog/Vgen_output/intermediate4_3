// This is a Moore state machine with two states 0 and 1, one input in, and one output out. 
// Reset state is 0. Output is high in state 0. If in is low, state changes.
module simple_fsm(input clk, input reset, input in, output out);
reg present_state, next_state;
// In state 0, if in=1, stay in state 0. In state 0, if in=0, go to state 1
// In state 1, if in=1, stay in state 1. In state 1, if in=0, go to state 0
// out=1 in state 0 and out=0 in state 1
// Present state is a register
always @(posedge clk, negedge reset)
begin
  if (reset==1'b0)
    present_state <= 1'b0;
  else
    present_state <= next_state;
end
// Next state is determined by the present state and the input
always @(*)
begin
  case (present_state)
    1'b0: next_state = (in==1'b0)? 1'b1 : 1'b0;
    1'b1: next_state = (in==1'b0)? 1'b0 : 1'b1;
    default: next_state = 1'b0;
  endcase
end
// Output is driven by the present state
always @(*)
begin
  case (present_state)
    1'b0: out = 1'b1;
    1'b1: out = 1'b0;
    default: out = 1'b0;
  endcase
end
endmodule
