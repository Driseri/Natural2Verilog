// This is a RAM module
module ram #( parameter ADDR_WIDTH=6, parameter DATA_WIDTH=8) 
(input [DATA_WIDTH-1:0] data, input [ADDR_WIDTH-1:0] addr, input we, clk, output [DATA_WIDTH-1:0] q);
reg [DATA_WIDTH-1:0] ram[2**ADDR_WIDTH-1:0];
// when we is high, write data to ram
// read teh value of ram at address addr
always @ (posedge clk) begin
	if (we) ram[addr] <= data;
end
assign q <= ram[addr];
endmodule

// This is a ROM module
module rom #( parameter ADDR_WIDTH=6, parameter DATA_WIDTH=8) 
(input [ADDR_WIDTH-1:0] addr, input clk, output [DATA_WIDTH-1:0] q);
reg [DATA_WIDTH-1:0] rom[2**ADDR_WIDTH-1:0];
initial begin
	rom[0] <= 4'h0;
	rom[1] <= 4'h1;
	rom[2] <= 4'h2;
	rom[3] <= 4'h3;
	rom[4] <= 4'h4;
	rom[5] <= 4'h5;
	rom[6] <= 4'h6;
	rom[7] <= 4'h7;
	rom[8] <= 4'h8;
	rom[9] <= 4'h9;
	rom[10] <= 4'hA;
	rom[11] <= 4'hB;
	rom[12] <= 4'hC;
	rom[13] <= 4'h