module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 



### Input:
module top_module(
	input clk,
	input load,
	input ena,
	input [1:0] amount,
	input [63:0] data,
	output reg [63:0] q);


### Response:
	
	always @(posedge clk) begin
		if (load)
			q <= data;
		else if (ena) case (amount)
			2'b00: q <= {q[0], q[63:1]};
			2'b01: q <= {q[8], q[63:1]};
			2'b10: q <= {q[63], q[62:1]};
			2'b11: q <= {q[56], q[63:1]};
			default: q <= 64'hx;
		endcase
	end
endmodule