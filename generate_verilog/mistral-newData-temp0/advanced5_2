// This is an ABRO FSM. 
// It outputs 1 when 1 is received for signals a and b irrespetive of their order, either simultaneously or non-simultaneously.
module abro( 
input clk,
input reset,
input  a,
input  b,
output z );
parameter IDLE = 0,
SA = 1,
SB = 2,
SAB = 3;
reg [1:0] cur_state,next_state;
// The output z is high when 1 is received for signals a and b in any order.
// The FSM has to work as follows: When reset is high, the state changes to IDLE.
// While in state IDLE, if a and b are both high, the state changes to SAB.
// Otherwise, if a is high, the state changes to SA.
// If b is high while in state SA, the state changes to SAB.
// If b is high while in state SB, the state changes to SAB.
// When in state SAB, the state changes to IDLE.
// The output z is high when in state SAB.
assign z = cur_state == SAB;

always @(posedge clk) begin
    if (reset)
        cur_state <= IDLE;
    else
        cur_state <= next_state;
end

always @(cur_state or a or b) begin
    case (cur_state)
        IDLE : begin
            if (a && !b) next_state = SA;
            else if (!a && b) next_state = SB;
            else if (a && b) next_state = SAB;
            else next_state