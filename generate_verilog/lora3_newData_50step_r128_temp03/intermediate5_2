// This is a shift left and rotate operation
module left_rotate(input clk,input reset,input [2:0] amount,input [7:0] data,input load,output reg [7:0] out);
// when load is high, load data to out
// shift left and rotate the register out by amount bits
// amount is a 3-bit number, 0 means no shift, 1 means shift left by 1 bit, 2 means shift left by 2 bits, etc.
// clk is the clock input
// reset is a synchronous reset
// load is asserted when data should be loaded into out
// data is the 8-bit input data
// out is the 8-bit output of the left rotate operation
    always @(posedge clk) begin
        if (reset) begin
            out <= 0;
        end
        else if (load) begin
            out <= data;
        end
        else begin
            case (amount)
                0: out <= out;
                1: out <= {out[6:0],out[7]};
                2: out <= {out[5:0],out[7:6]};
                3: out <= {out[4:0],out[7:5]};
                4: out <= {out[3:0],out[7:4]};
                5: out <= {out[2:0],out[7:3]};
                6: out <= {out[1:0],out[7: