// Design a 64-bit arithmetic shift register, with synchronous load. 
// When ena is high, the shifter can shift both left and right, and by 1 or 8 bit positions, selected by amount.
module advshift(input clk,
input load,
input ena,
input [1:0] amount,
input [63:0] data,
output reg [63:0] q); 
// shift according to the following values of amount:
// 2'b00: shift left by 1 bit.
// 2'b01: shift left by 8 bits.
// 2'b10: shift right by 1 bit.
// 2'b11: shift right by 8 bits.


// When load is high, load the shifter with data[63:0]. Otherwise, if ena is high, shift.


// If both load and ena are high, the shifter will load and then shift. 


// If the shifter is loading and the amount changes, the load should be delayed until the next clock edge. 


// If the shifter is shifting and the amount changes, the shift should be interrupted and the new amount should be used. 


// If the shifter is loading and the ena changes from 1 to 0, the load should be delayed until the next clock edge. 


// If the shifter is shifting and the ena changes from 1 to 0, the shift should be interrupted and the shifter should load with the current value of q. 


// If the shifter is loading and the clk changes, the load should be delayed until the next clock edge. 


// If the shifter is shifting and the clk changes, the shift should be interrupted and the shifter should load with the current value of q. 